const { app, BrowserWindow, ipcMain } = require("electron");
const path = require("path");
const { Worker } = require("worker_threads");
const fs = require("fs");
const { clearFolder } = require("./clearFolder");

clearFolder(path.join(__dirname, "temp"));

function createWindow() {
  const win = new BrowserWindow({
    width: 900,
    height: 700,
    webPreferences: { preload: path.join(__dirname, "preload.js") },
  });
  win.loadFile("index.html");
}

app.whenReady().then(createWindow);

// ...existing code...

// –•—Ä–∞–Ω–∏–º –≤–æ—Ä–∫–µ—Ä—ã –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Ö –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
const workers = {};

ipcMain.on("start-process", (event, { surah, range, photo }) => {
  const worker = new Worker(path.join(__dirname, "video.js"), {
    workerData: { surah, range, photo },
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ—Ä–∫–µ—Ä –ø–æ id –æ–∫–Ω–∞ (–∏–ª–∏ –¥—Ä—É–≥–æ–º—É —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∫–ª—é—á—É)
  workers[event.sender.id] = worker;

  worker.on("message", (msg) => {
    if (msg.type === "log") event.sender.send("log", msg.text);
    if (msg.type === "progress") event.sender.send("progress", msg.percent);
  });

  worker.on("error", (err) =>
    event.sender.send("log", "‚ùå Vorker's mistake: " + err.message)
  );
  worker.on("exit", (code) => {
    if (code !== 0)
      event.sender.send("log", `The borker ended with the code ${code}`);
    // –£–¥–∞–ª—è–µ–º –≤–æ—Ä–∫–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
    delete workers[event.sender.id];
  });
});

// –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–æ—Ä–∫–µ—Ä–∞
ipcMain.on("stop-process", (event) => {
  const worker = workers[event.sender.id];
  if (worker) {
    worker.terminate();
    event.sender.send("log", "‚èπ Vorker stopped ");
    delete workers[event.sender.id];
  } else {
    event.sender.send("log", "‚ùó There is no active workman to stop ");
  }
});

ipcMain.on("telegram-process", (event, { token, chatid }) => {
  const worker = new Worker(path.join(__dirname, "telegram.js"), {
    workerData: { token, chatid },
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ—Ä–∫–µ—Ä –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
  workers[event.sender.id] = worker;

  worker.on("message", (msg) => {
    if (msg.type === "log") event.sender.send("log", msg.text);
    if (msg.type === "progress") event.sender.send("progress", msg.percent);
  });

  worker.on("error", (err) =>
    event.sender.send("log", "‚ùå Vorker's mistake: " + err.message)
  );
  worker.on("exit", (code) => {
    if (code !== 0)
      event.sender.send("log", `The borker ended with the code${code}`);
    // –£–¥–∞–ª—è–µ–º –≤–æ—Ä–∫–µ—Ä –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    delete workers[event.sender.id];
  });
});

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
ipcMain.on("upload-photo", (event, { name, buffer }) => {
  try {
    const tempDir = path.join(__dirname, "temp");
    if (!fs.existsSync(tempDir)) fs.mkdirSync(tempDir);
    const savePath = path.join(tempDir, name);

    // Array –∏–∑ —Ä–µ–Ω–¥–µ—Ä–∞ ‚Üí Buffer –¥–ª—è –∑–∞–ø–∏—Å–∏
    const fileBuffer = Buffer.from(buffer);
    fs.writeFileSync(savePath, fileBuffer);

    event.sender.send("log", `üñº photo saved: ${name}`);
  } catch (err) {
    event.sender.send("log", "‚ùå Error while maintaining a photo: " + err.message);
  }
});
